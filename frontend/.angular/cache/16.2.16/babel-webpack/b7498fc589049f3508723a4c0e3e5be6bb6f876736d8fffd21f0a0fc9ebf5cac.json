{"ast":null,"code":"import _asyncToGenerator from \"/root/jedike.dev/erp-mean-docker/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = environment.apiUrl;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser = this.currentUserSubject.asObservable();\n      this.tokenKey = 'erp_token';\n      // Check if user is logged in on service initialization\n      const token = localStorage.getItem(this.tokenKey);\n      if (token) {\n        this.getCurrentUser().subscribe();\n      }\n    }\n    login(email, password) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield _this.http.post(`${_this.apiUrl}/auth/login`, {\n            email,\n            password\n          }).toPromise();\n          if (response) {\n            localStorage.setItem(_this.tokenKey, response.token);\n            _this.currentUserSubject.next(response.user);\n          }\n        } catch (error) {\n          throw error;\n        }\n      })();\n    }\n    register(userData) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield _this2.http.post(`${_this2.apiUrl}/auth/register`, userData).toPromise();\n          if (response) {\n            localStorage.setItem(_this2.tokenKey, response.token);\n            _this2.currentUserSubject.next(response.user);\n          }\n        } catch (error) {\n          throw error;\n        }\n      })();\n    }\n    getCurrentUser() {\n      const headers = this.getAuthHeaders();\n      return this.http.get(`${this.apiUrl}/auth/me`, {\n        headers\n      }).pipe(tap(user => this.currentUserSubject.next(user)), catchError(error => {\n        this.logout();\n        return throwError(error);\n      }));\n    }\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n      this.currentUserSubject.next(null);\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    getAuthHeaders() {\n      const token = this.getToken();\n      return new HttpHeaders({\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      });\n    }\n    isAuthenticated() {\n      return !!this.getToken();\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}