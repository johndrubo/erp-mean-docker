{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let OrderListComponent = class OrderListComponent {\n  constructor(orderService, productService, authService) {\n    this.orderService = orderService;\n    this.productService = productService;\n    this.authService = authService;\n    this.orders = [];\n    this.products = [];\n    this.loading = false;\n    this.showCreateForm = false;\n    this.newOrder = {\n      items: []\n    };\n    this.newOrderItem = {\n      product: '',\n      quantity: 1\n    };\n  }\n  ngOnInit() {\n    this.loadOrders();\n    this.loadProducts();\n  }\n  loadOrders() {\n    this.loading = true;\n    const user = this.authService.currentUserSubject.value;\n    // Admin and managers see all orders, employees see only their orders\n    const ordersObservable = user?.role === 'admin' || user?.role === 'manager' ? this.orderService.getAllOrders() : this.orderService.getMyOrders();\n    ordersObservable.subscribe({\n      next: orders => {\n        this.orders = orders;\n        this.loading = false;\n      },\n      error: error => {\n        console.error('Error loading orders:', error);\n        this.loading = false;\n      }\n    });\n  }\n  loadProducts() {\n    this.productService.getProducts().subscribe({\n      next: products => {\n        this.products = products.filter(p => p.stock > 0);\n      },\n      error: error => {\n        console.error('Error loading products:', error);\n      }\n    });\n  }\n  addItemToOrder() {\n    if (this.newOrderItem.product && this.newOrderItem.quantity > 0) {\n      const existingItem = this.newOrder.items.find(item => item.product === this.newOrderItem.product);\n      if (existingItem) {\n        existingItem.quantity += this.newOrderItem.quantity;\n      } else {\n        this.newOrder.items.push({\n          product: this.newOrderItem.product,\n          quantity: this.newOrderItem.quantity\n        });\n      }\n      this.newOrderItem = {\n        product: '',\n        quantity: 1\n      };\n    }\n  }\n  removeItemFromOrder(index) {\n    this.newOrder.items.splice(index, 1);\n  }\n  getProductName(productId) {\n    const product = this.products.find(p => p._id === productId);\n    return product ? product.name : 'Unknown Product';\n  }\n  getProductPrice(productId) {\n    const product = this.products.find(p => p._id === productId);\n    return product ? product.price : 0;\n  }\n  calculateOrderTotal() {\n    return this.newOrder.items.reduce((total, item) => {\n      return total + this.getProductPrice(item.product) * item.quantity;\n    }, 0);\n  }\n  createOrder() {\n    if (this.newOrder.items.length > 0) {\n      this.orderService.createOrder(this.newOrder).subscribe({\n        next: order => {\n          this.orders.unshift(order);\n          this.resetOrderForm();\n          this.showCreateForm = false;\n          this.loadProducts(); // Refresh products to update stock\n        },\n\n        error: error => {\n          console.error('Error creating order:', error);\n          alert('Error creating order. Please check product availability.');\n        }\n      });\n    }\n  }\n  updateOrderStatus(order, newStatus) {\n    this.orderService.updateOrderStatus(order._id, newStatus).subscribe({\n      next: updatedOrder => {\n        const index = this.orders.findIndex(o => o._id === updatedOrder._id);\n        if (index !== -1) {\n          this.orders[index] = updatedOrder;\n        }\n      },\n      error: error => {\n        console.error('Error updating order status:', error);\n        alert('Error updating order status. Please try again.');\n      }\n    });\n  }\n  resetOrderForm() {\n    this.newOrder = {\n      items: []\n    };\n    this.newOrderItem = {\n      product: '',\n      quantity: 1\n    };\n  }\n  canManageOrders() {\n    const user = this.authService.currentUserSubject.value;\n    return user?.role === 'admin' || user?.role === 'manager';\n  }\n  getStatusClass(status) {\n    switch (status) {\n      case 'pending':\n        return 'status-pending';\n      case 'confirmed':\n        return 'status-confirmed';\n      case 'shipped':\n        return 'status-shipped';\n      case 'delivered':\n        return 'status-delivered';\n      case 'cancelled':\n        return 'status-cancelled';\n      default:\n        return '';\n    }\n  }\n};\nOrderListComponent = __decorate([Component({\n  selector: 'app-order-list',\n  templateUrl: './order-list.component.html'\n})], OrderListComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}